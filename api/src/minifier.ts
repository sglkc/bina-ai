import htmlnano from 'htmlnano'
import { minify } from 'html-minifier'

function useMinifier(html: string): Promise<string> {
  return new Promise((res) => {
    const minified = minify(html, {
      collapseBooleanAttributes: true,
      collapseWhitespace: true,
      collapseInlineTagWhitespace: true,
      decodeEntities: true,
      includeAutoGeneratedTags: false,
      removeAttributeQuotes: true,
      removeComments: true,
      removeEmptyAttributes: true,
      removeEmptyElements: true,
      removeOptionalTags: true,
      removeRedundantAttributes: true,
      trimCustomFragments: true,
      useShortDoctype: true,
    })

    res(minified)
  })
}

function useNano(html: string): Promise<string> {
  return new Promise((res, rej) => {
    htmlnano.process(html, {
      collapseAttributeWhitespace: true,
      collapseWhitespace: 'all',
      deduplicateAttributeValues: true,
      removeComments: 'all',
      removeEmptyAttributes: true,
      minifyJs: false,
      minifyCss: false,
      minifySvg: false,
      minifyConditionalComments: true,
      removeRedundantAttributes: true,
      collapseBooleanAttributes: {
        amphtml: true
      },
      removeOptionalTags: true,
    })
      .then((minified) => res(minified.html))
      .catch(rej)
  })
}

export default async function minifyHtml(html: string): Promise<string> {
  const [minifier, nano] = await Promise.all([
    useMinifier(html),
    useNano(html)
  ])

  return minifier.length > nano.length ? nano : minifier
}
