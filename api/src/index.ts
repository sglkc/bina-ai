import express, { Request } from 'express'
import { minify } from 'html-minifier'
import htmlnano from 'htmlnano'
import 'dotenv/config'

const PORT = process.env.PORT ?? 5000
const app = express()

app.use(express.text())
app.use(express.json())
app.use(express.urlencoded({ extended: true }))

app.post('/mini', async (req: Request<{}, {}, string>, res) => {
  if (!req.is('text/*')) {
    res.send('content type must be plain text')
    return
  }

  const html = minify(req.body, {
    collapseBooleanAttributes: true,
    collapseWhitespace: true,
    collapseInlineTagWhitespace: true,
    decodeEntities: true,
    includeAutoGeneratedTags: false,
    removeAttributeQuotes: true,
    removeComments: true,
    removeEmptyAttributes: true,
    removeEmptyElements: true,
    removeOptionalTags: true,
    removeRedundantAttributes: true,
    trimCustomFragments: true,
    useShortDoctype: true,
  })

  res.send(html)
})

app.post('/nano', async (req: Request<{}, {}, string>, res) => {
  if (!req.is('text/*')) {
    res.send('content type must be plain text')
    return
  }

  const { html } = await htmlnano.process(req.body, {
    collapseAttributeWhitespace: true,
    collapseWhitespace: 'all',
    deduplicateAttributeValues: true,
    removeComments: 'all',
    removeEmptyAttributes: true,
    minifyJs: false,
    minifyCss: false,
    minifySvg: false,
    minifyConditionalComments: true,
    removeRedundantAttributes: true,
    collapseBooleanAttributes: {
      amphtml: true
    },
    removeOptionalTags: true,
  })

  res.send(html)
})

app.listen(PORT, () => {
  console.log('Listening on port', PORT)
})
